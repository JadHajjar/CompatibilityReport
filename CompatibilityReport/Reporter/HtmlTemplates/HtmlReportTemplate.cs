// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CompatibilityReport.Reporter.HtmlTemplates
{
    using Util;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class HtmlReportTemplate : HtmlReportTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <tit" +
                    "le>");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModSettings.ModName));
            this.Write("</title>\r\n</head>\r\n<style>\r\n    /* \r\n        unsubscribe-color: #dd2323\r\n        " +
                    "major-color: #e69138\r\n        minor-color: #ffd966\r\n        remark-color: #93c47" +
                    "d\r\n        nothing-color: #5a9b3d\r\n        processed-color: #4cb2e9\r\n     */\r\n  " +
                    "  * {font-family:sans-serif;}\r\n    body {background-color:#f9f6ea; margin: 12px}" +
                    "\r\n    header {padding: 0 10px;}\r\n    article header {padding: 0; }\r\n    footer {" +
                    "margin: 20px 0px 40px 10px}\r\n    section {padding: 0 10px;}\r\n\r\n    h1 {margin-to" +
                    "p: 10px; margin-bottom: 0; padding:24px 18px; background-color:#e8e5d4;}\r\n    h2" +
                    " {margin-top:0px; border-bottom:1px solid black;}\r\n    h3 {margin: 20px 0 0 0px;" +
                    " }\r\n    h4 {margin: 20px 0 0 18px; }\r\n    a:link {color: black; text-decoration:" +
                    " underline;}\r\n    a:visited {color: black; text-decoration: underline;}\r\n    a:h" +
                    "over {color: #0000e0; text-decoration: underline;}\r\n\r\n    nav { display: flex; p" +
                    "osition: sticky; top: 0; }\r\n    nav ul { width: 100%; display: flex; align-items" +
                    ": center; min-height: 40px; padding: 0 10px; background-color: #f9f6ea; }\r\n    n" +
                    "av ul li { display: flex; align-items: center; height: 40px; list-style: none; f" +
                    "ont-weight: bold; font-size: 16px; cursor: pointer;}\r\n    nav ul li:hover { back" +
                    "ground-color: #f9f6ea; }\r\n    nav ul li.flag { height: 40px; }\r\n    nav ul li.fl" +
                    "ag a { margin-top: 2px; }\r\n    nav ul li a { padding: 12px 15px; text-decoration" +
                    ": none!important; color: black; }\r\n    nav ul li a:link { text-decoration: none!" +
                    "important; color: black; }\r\n    nav ul li a:visited { text-decoration: none!impo" +
                    "rtant; color: black; }\r\n    nav ul li a:hover { text-decoration: none!important;" +
                    " color: black; }\r\n    \r\n    .languages ul li a { padding: 0 1px; }\r\n\r\n    articl" +
                    "e[id] { margin-top: -40px; padding-top: 60px; }\r\n    \r\n    table { font-family: " +
                    "arial, sans-serif; border-collapse: collapse; width: 100%; }\r\n    td, th { borde" +
                    "r: 1px solid #dddddd; text-align: left; padding: 8px; }\r\n    tr:nth-child(even) " +
                    "{ background-color: #e7e7e7; }\r\n\r\n    .text-smaller {font-size: 13px; }\r\n    .te" +
                    "xt-small {font-size: 15px; }\r\n    .show {display: inherit;}\r\n    .hide {display:" +
                    " none; }\r\n    .warn { color: #ff9200; }\r\n    .error { color: red; }\r\n    .font-b" +
                    "old { font-weight: 600; }\r\n\r\n    .mt-1 { margin-top: 1rem; }\r\n    .center {text-" +
                    "align: center; }\r\n    .report-section__titleBar { margin-left: 0; padding: 10px;" +
                    "}\r\n    .report-section__title { }\r\n    .report-section__content {margin-left: 0;" +
                    " padding: 5px}\r\n    .report-content:last-child { border-bottom: unset !important" +
                    "; }\r\n    li.message a {min-width: 260px; display: inline-block;}   \r\n    ul {pad" +
                    "ding-inline-start: 20px;}    \r\n\r\n    .author,.modName {font-weight: bold;}\r\n\r\n  " +
                    "  .f-small {font-size: small; margin-right: 2px; margin-left: -2px; padding: 2px" +
                    " !important;}\r\n    .disabled {padding: 5px; font-weight: bold;}\r\n    .capitalize" +
                    " {text-transform: uppercase;}\r\n    .unsubscribe {background-color: #dd2323; colo" +
                    "r: #f9f6ea}\r\n    .major {background-color: #e69138;}\r\n    .minor {background-col" +
                    "or: #ffd966;}\r\n    .remark {background-color: #93c47d;}\r\n    .nothing {backgroun" +
                    "d-color: #5a9b3d; color: #f9f6ea}\r\n    .processed {background-color: #4cb2e9;}\r\n" +
                    "    \r\n    .line_unsubscribe {margin-top:-6px; margin-left:0px; border-left: soli" +
                    "d 10px #dd2323; border-bottom: solid 10px #dd2323;}\r\n    .line_major {margin-top" +
                    ":-6px; margin-left:0px; border-left: solid 10px #e69138; border-bottom: solid 10" +
                    "px #e69138;}\r\n    .line_minor {margin-top:-6px; margin-left:0px; border-left: so" +
                    "lid 10px #ffd966; border-bottom: solid 10px #ffd966;}\r\n    .line_remark {margin-" +
                    "top:-6px; margin-left:0px; border-left: solid 10px #93c47d; border-bottom: solid" +
                    " 10px #93c47d;}\r\n    .line_nothing {margin-top:-6px; margin-left:0px; border-lef" +
                    "t: solid 10px #5a9b3d; border-bottom: solid 10px #5a9b3d;}\r\n    .line_processed " +
                    "{margin-top:-6px; margin-left:0px; border-left: solid 10px #4cb2e9; border-botto" +
                    "m: solid 10px #4cb2e9;}\r\n    .border-b_unsubscribe {border-bottom: solid 2px #dd" +
                    "2323;}\r\n    .border-b_major {border-bottom: solid 2px #e69138;}\r\n    .border-b_m" +
                    "inor {border-bottom: solid 2px #ffd966;}\r\n    .border-b_remark {border-bottom: s" +
                    "olid 2px #93c47d;}\r\n    .border-b_nothing {border-bottom: solid 2px #5a9b3d;}\r\n " +
                    "   .border-b_processed {border-bottom: solid 2px #4cb2e9;}\r\n</style>\r\n\r\n<body>\r\n" +
                    "    <header>\r\n        <h1 data-i18n=\"HRT_S_CRC\" data-i18n-vars=\"name█");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModSettings.ModName));
            this.Write("|date+time█");
            this.Write(this.ToStringHelper.ToStringWithCulture($"{reportCreationTime:d MMMM yyyy}"));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture($"{reportCreationTime:t}"));
            this.Write("\"> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModSettings.ModName));
            this.Write(", created on ");
            this.Write(this.ToStringHelper.ToStringWithCulture($"{reportCreationTime:d MMMM yyyy}"));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture($"{reportCreationTime:t}"));
            this.Write("</h1>\r\n        <script>\r\n            var translations = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTranslations()));
            this.Write("\r\n            var domParser = new DOMParser();\r\n            var tempElement = doc" +
                    "ument.createElement(\'div\');\r\n            function getTranslation(lang, key) {\r\n " +
                    "               return translations[lang][key] ? translations[lang][key] : key;\r\n" +
                    "            }\r\n            function htmlDecode(input) {\r\n              var eleme" +
                    "nt = tempElement;\r\n              element.innerHTML = input;\r\n              retur" +
                    "n element.textContent;\r\n            }\r\n            function applyVariables(lang," +
                    " translation, variablesString, prefixValue) {\r\n                if (prefixValue.i" +
                    "ncludes(\"data-i18n\")) {\r\n                    var doc = domParser.parseFromString" +
                    "(prefixValue, \'text/html\');\r\n                    element = doc.querySelector(\"[d" +
                    "ata-i18n]\");\r\n                    if (element) {\r\n                        var ke" +
                    "y = element.dataset.i18n;\r\n                        element.innerHTML = getTransl" +
                    "ation(lang, key);\r\n                        prefixValue = element.outerHTML;\r\n   " +
                    "                 }\r\n                }\r\n\r\n                if (!variablesString) r" +
                    "eturn prefixValue + translation;\r\n\r\n                var keyValues = variablesStr" +
                    "ing.split(\"|\");\r\n                keyValues.forEach(k => {\r\n                    v" +
                    "ar keyVal = k.split(\'█\');\r\n                    translation = translation.replace" +
                    "(`{${keyVal[0]}}`, getTranslation(lang, htmlDecode(keyVal[1])));\r\n              " +
                    "  });\r\n                return prefixValue + translation;\r\n            }\r\n       " +
                    "     function changeLanguage(lang) {\r\n                var elements = document.qu" +
                    "erySelectorAll(\"[data-i18n]\");\r\n                elements.forEach((element) => {\r" +
                    "\n                    var key = element.dataset.i18n;\r\n                    var lo" +
                    "caleVars = element.dataset.i18nVars;\r\n                    var prefixValue = elem" +
                    "ent.dataset.i18nPrefixValue || \'\';\r\n                    var value = element.data" +
                    "set.i18nValue || \'\';\r\n                    var translated = getTranslation(lang, " +
                    "key);\r\n                    element.innerHTML = translated ? applyVariables(lang," +
                    " translated, localeVars, htmlDecode(prefixValue)) + htmlDecode(value) : element." +
                    "innerHTML;\r\n                });\r\n            }\r\n        </script>\r\n    </header>" +
                    "\r\n\r\n    <nav>\r\n        <ul>\r\n          ");
 string LI_Link(bool shouldRender, string text, string anchor, string t, string tvalue) => shouldRender ? "<li class=\"" + anchor + "\"><a href=\"#" + anchor + $"\" {t.T()} {tvalue.TVal()}>{text}</a></li>" : ""; 
            this.Write("\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Link(unsubscribe.Count > 0, $"Unsubscribe ({unsubscribe.Count})", "unsubscribe", "HRT_LIL_U", $" ({unsubscribe.Count})")));
            this.Write("\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Link(majorIssues.Count > 0, $"Major Issues ({majorIssues.Count})", "major", "HRT_LIL_MAI", $" ({majorIssues.Count})")));
            this.Write("\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Link(minorIssues.Count > 0, $"Minor Issues ({minorIssues.Count})", "minor", "HRT_LIL_MI", $" ({minorIssues.Count})")));
            this.Write("\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Link(remarks.Count > 0, $"Remarks ({remarks.Count})", "remark", "HRT_LIL_R", $" ({remarks.Count})")));
            this.Write("\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Link(nothingToReport.Count > 0, $"Nothing to report ({nothingToReport.Count})", "nothing", "HRT_LIL_NTR", $" ({nothingToReport.Count})")));
            this.Write("\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Link(true, $"Mod List ({AllModList().Length})", "processed", "HRT_P_PM", $" ({AllModList().Length})")));
            this.Write("\r\n        </ul>\r\n        <div class=\"languages\">\r\n            <ul>\r\n             " +
                    "   ");
 string LI_Language(string svgContent, string className, string lang) => "<li class=\"" + className + $"\"><a onclick=\"{(lang == "xx" ? "location.reload()": $"changeLanguage('{lang}')")}\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 640 480\" width=\"54\" height=\"40\">{svgContent}</svg></a></li>"; 

                   for (int i = 0; i < AvailableLanguages.Count; i++)
                   {
                       string langCode = AvailableLanguages[i];

            this.Write("                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(LI_Language(GetFlag(langCode), $"flag flag-{langCode}", langCode)));
            this.Write("\r\n");

                   }

            this.Write("            </ul>\r\n        </div>\r\n    </nav>\r\n\r\n    <section>\r\n        <div>\r\n  " +
                    "          <span class=\"text-smaller\" data-i18n=\"HRT_S_VWC\" data-i18n-vars=\"FullV" +
                    "ersion█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml($"<strong>{ModSettings.FullVersion}</strong>")));
            this.Write("|VersionString█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml($"<strong>{catalog.VersionString()}</strong>")));
            this.Write("\">Version <strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModSettings.FullVersion));
            this.Write("</strong> with catalog <strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.VersionString()));
            this.Write("</strong>.</span>\r\n            <span class=\"text-smaller\" data-i18n=\"HRT_S_YGM\" d" +
                    "ata-i18n-vars=\"SubscriptionCount█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml($"<strong>{catalog.SubscriptionCount()}</strong>")));
            this.Write("\">Your game has <strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.SubscriptionCount()));
            this.Write("</strong> mods.</span>\r\n            <span class=\"text-smaller\" data-i18n=\"HRT_S_T" +
                    "MCC\" data-i18n-vars=\"ReviewedModCount█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml($"<strong>{catalog.ReviewedModCount}</strong>")));
            this.Write("|Updated█");
            this.Write(this.ToStringHelper.ToStringWithCulture($"{catalog.Updated:d MMMM yyyy}"));
            this.Write("\">The mod catalog contains <strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.ReviewedModCount));
            this.Write("</strong> reviewed mods and was created on ");
            this.Write(this.ToStringHelper.ToStringWithCulture($"{catalog.Updated:d MMMM yyyy}"));
            this.Write(".</span>\r\n            <br>\r\n            <span class=\"text-small mt-1\" data-i18n=\"" +
                    "HRT_S_MUA\">Mods updated after this date might have an outdated review below.</sp" +
                    "an>\r\n            <hr>\r\n        </div>\r\n    \r\n        <div>\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.WordWrap(ModSettings.ReportTextForThisModVersion)));
            this.Write("\r\n        </div>\r\n    \r\n        <div data-i18n=\"REP_ATT_NEW\">\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.WordWrap(catalog.Note)));
            this.Write("\r\n        </div>\r\n    </section>\r\n\r\n    <section>\r\n");
  // Different Catalog version
    if (IsDifferentVersion) {
            this.Write("    <div>\r\n        <h3 data-i18n=\"HRT_DCV_H\">WARNING:</h3>\r\n        <span data-i1" +
                    "8n=\"HRT_DCV_T\" data-i18n-vars=\"CatalogGameVersion█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml($"<strong>{CatalogGameVersion}</strong>")));
            this.Write("\">The catalog is made for game version ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CatalogGameVersion));
            this.Write(".</span>\r\n        <span data-i18n=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((IsOlder ? "HRT_DCV_YGIO" : "HRT_DCV_YGIN")));
            this.Write("\">Your game is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsOlder ? "older" : "newer"));
            this.Write(" (");
            this.Write(this.ToStringHelper.ToStringWithCulture(CurrentGameVersion));
            this.Write(").</span>\r\n        <span data-i18n=\"HRT_DCV_RNA\">Results might not be accurate.</" +
                    "span>\r\n    </div>");

    }

            this.Write("    \r\n");
  // Local subscriptions
    if (catalog.LocalSubscriptionCount != 0) {
            this.Write("        <h3>NOTE</h3>\r\n        <div class=\"text-small\">\r\n          <span data-i18" +
                    "n=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.LocalSubscriptionCount == 1 ? "HRT_LSM_S" : "HRT_LSM_P"));
            this.Write("\" data-i18n-vars=\"LocalSubscriptionCount█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml($"<strong>{catalog.LocalSubscriptionCount}</strong>")));
            this.Write("\">You have <strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.LocalSubscriptionCount));
            this.Write("</strong> local mod");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.LocalSubscriptionCount == 1 ? "" : "s"));
            this.Write(@" local mods, which we can't review. The report does not check for incompatibilities with these. Results might not be completely accurate.</span>
          </br>
          <span data-i18n=""HRT_LSM_E"">Use mods as Workshop subscription whenever possible. Mods copied to the local mods folder don't always work and often cannot be detected correctly by other mods.</span> 
        </div>");

    }

            this.Write("\r\n");
  // Fake subscriptions
    if (catalog.FakeSubscriptionCount != 0) { 
            this.Write("        <h3>NOTE</h3>\r\n        <div>\r\n           <span data-i18n=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.FakeSubscriptionCount == 1 ? "HRT_FS_S" : "HRT_FS_P"));
            this.Write("\" data-i18n-vars=\"LocalSubscriptionCount█");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.FakeSubscriptionCount));
            this.Write("\">The report includes <strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.FakeSubscriptionCount));
            this.Write("</strong> fake subscription");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.FakeSubscriptionCount == 1 ? "" : "s"));
            this.Write(".</span> \r\n        </div>");

    }

            this.Write("\r\n");
  // Non reviewed subscriptions
    if (NonReviewedSubscriptions != 0) { 
            this.Write("        <h3>NOTE</h3>\r\n        <div>\r\n           <span data-i18n=\"HRT_NRS_N\" data" +
                    "-i18n-vars=\"NonReviewedSubscriptions█");
            this.Write(this.ToStringHelper.ToStringWithCulture(NonReviewedSubscriptions));
            this.Write("\"><strong>");
            this.Write(this.ToStringHelper.ToStringWithCulture(NonReviewedSubscriptions));
            this.Write("</strong> of your mods have not been reviewed yet. Some incompatibilities or warn" +
                    "ings might be missing in the report due to this.</span> \r\n        </div>");

    }

            this.Write(@"
    <h3 data-i18n=""HRT_GI_H"">General information</h3>
    <ul style=""padding-left: 30px"">
        <li data-i18n=""HRT_GI_ETD""> Always <strong>EXIT TO DESKTOP</strong> and restart the game. Never exit to main menu!</li> 
        <li data-i18n=""HRT_GI_NU""> <strong>NEVER</strong> (un)subscribe to anything while the game is running! This resets some mods.</li> 
        <li data-i18n=""HRT_GI_WP""> When playing with mods, save to a new savegame often and make frequent <strong>BACKUPS</strong>.</li> 
        <li data-i18n=""HRT_GI_AR""> Always <strong>READ</strong> the mod description on the Steam Workshop before subscribing.</li>
        <li data-i18n=""HRT_GI_HI""> Having issues with a mod? Make a comment on its Workshop page so the author knows.</li>
        <li data-i18n=""HRT_GI_AM""> Abandoned mods can still work fine. They're just unlikely to get updates.</li>
        <li data-i18n=""HRT_GI_NW""> Mod compatible, but not working? Try unsubscribe and resubscribe (NOT while in game).</li>
        <li data-i18n=""HRT_GI_BML"" data-i18n-vars=""linkBrokenMods█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml("<a href=\"https://pdxint.at/BrokenModCS\">pdxint.at/BrokenModCS</a>")));
            this.Write(@"""> List of broken and incompatible mods <a href=""https://pdxint.at/BrokenModCS"">pdxint.at/BrokenModCS</a></li>
        <li> Recommended Mods List by <strong>chameleon-tbn</strong> <a href=""https://bit.ly/3VA9NxC"">bit.ly/3VA9NxC</a> </li>
        <li data-i18n=""HRT_GI_M"" data-i18n-vars=""form█");
            this.Write(this.ToStringHelper.ToStringWithCulture(Toolkit.EscapeHtml("<a href=\"https://forms.gle/PvezwfpgS1V1DHqA9\">form</a>")));
            this.Write("\"> Found a mistake? Please fill out this <a href=\"https://forms.gle/PvezwfpgS1V1D" +
                    "HqA9\">form</a>.</li>\r\n    </ul>\r\n\r\n");
  // Is outdated
    if (ShowOutdatedWarning) { 
            this.Write("    \r\n    <h3 class=\"warn ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ShowOutdatedWarning ? "show" : "hide"));
            this.Write("\" data-i18n=\"HRT_IO_SOW\">\r\n        <strong>WARNING:</strong> The latest review ca" +
                    "talog could not be downloaded. Results might be outdated.\r\n    </h3>");

    }

            this.Write("    </section>\r\n\r\n");
 // Reusable template
    
    string NestedList(MessageList nestedList, string classes = null)
    {
        if (nestedList?.messages == null) return string.Empty;

        return !string.IsNullOrEmpty(nestedList.title) 
            ? "ul".Tag( "li".Tag("span".Tag(nestedList.title, "title", localeId: nestedList.titleLocaleId) + "ul".Tag(nestedList.messages.NestedLi())), classes)
            : "ul".Tag(nestedList.messages.NestedLi(), classes);
    }

    string NestedCompatibitlityList(List<CompatibilityList> compatibilityLists, string classes) {
        if (compatibilityLists.Count == 0) return string.Empty;

        return "ul".Tag(compatibilityLists.NestedCompatLi(), classes);
    }

    string ListItem(Message item, string classes = null) {
        return item == null
            ? string.Empty
            : "ul".Tag(
                "li".Tag("span".Tag(item.message, classes, localeId: item.messageLocaleId, localeVars: item.localeIdVariables) + BulletList(item.details, "details", item.detailsLocaleId)));
    }

    string BulletList(string text, string classes = null, string localeId = null) {
        return string.IsNullOrEmpty(text)
            ? string.Empty
            : "ul".Tag(
                string.Join("\n", text
                    .Split('\n')
                    .Select(part => "li".Tag(part, localeId: localeId))
                    .ToArray())
                , classes);
    }

    void RenderSection(int number, string title, string css_style, string langKey, Func<string> content)
    {
        if (number == 0) return;

            this.Write("          <article id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(css_style));
            this.Write("\">\r\n             <header>                \r\n               <h3 class=\"report-secti" +
                    "on__titleBar ");
            this.Write(this.ToStringHelper.ToStringWithCulture(css_style));
            this.Write("\">\r\n                   <span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(number));
            this.Write("</span>&nbsp;<span class=\"report-section__title\" data-i18n=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(langKey));
            this.Write("\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(title));
            this.Write("</span>\r\n               </h3>\r\n             </header>\r\n             <section clas" +
                    "s=\"line_");
            this.Write(this.ToStringHelper.ToStringWithCulture(css_style));
            this.Write("\">\r\n                <div class=\"report-section__content\">\r\n                  ");

        if (content != null)
            content();

            this.Write("                </div>\r\n             </section>\r\n          </article>\r\n");
  }
    
    string RenderContent(List<ModInfo> list, string style)
        {
            foreach (ModInfo modInfo in list)
            {
                if (modInfo.isLocal)
                {
            this.Write("                    <div class=\"report-content border-b_");
            this.Write(this.ToStringHelper.ToStringWithCulture(style));
            this.Write("\">\r\n                        <p class=\"font-bold\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(modInfo.modName));
            this.Write("</p>\r\n                        <ul>\r\n                            <li data-i18n=\"HR" +
                    "TC_CRM_S\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(cannotReviewMessage));
            this.Write("</li>                        \r\n                        </ul>\r\n                   " +
                    "     <p class=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(modInfo.isCameraScript? "": "hide"));
            this.Write("\" data-i18n=\"HRTC_ICSM_S\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(isCameraScriptMessage));
            this.Write("</p>\r\n                    </div>");
                    
                }
                else
                {

            this.Write("                    <div class=\"report-content border-b_");
            this.Write(this.ToStringHelper.ToStringWithCulture(style));
            this.Write("\">\r\n                        <p>\r\n                            ");
            this.Write(this.ToStringHelper.ToStringWithCulture("span".TagConditional(modInfo.isDisabled, "DISABLED", "disabled minor capitalize", localeId: "HRT_P_D")));
            this.Write("\r\n                            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HtmlExtensions.NameAuthorWithIDAsLink(modInfo.modName, modInfo.authorName, modInfo.steamUrl, modInfo.idString)));
            this.Write("\r\n                        </p>\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ListItem(modInfo.instability, "instability mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedList(modInfo.requiredDlc, "requiredDlc mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ListItem(modInfo.unneededDependencyMod, "unnededDependency mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ListItem(modInfo.disabled, "disabledMod mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedList(modInfo.successors, "successors mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ListItem(modInfo.stability, "stability mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedCompatibitlityList(modInfo.compatibilities, "compatibilities mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedList(modInfo.requiredMods, "requiredMods mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedList(modInfo.statuses, "statuses mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(BulletList(modInfo.note, "note mt-1", modInfo.noteLocaleId)));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedList(modInfo.alternatives, "alternatives mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NestedList(modInfo.recommendations, "recommendations")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture("ul".TagConditional(modInfo.anyIssues, "li".Tag(noKnownIssuesMessage, localeId: "HRTC_NKIM_S"), "noKnownIssues mt-1")));
            this.Write("\r\n                        ");
            this.Write(this.ToStringHelper.ToStringWithCulture("ul".TagConditional(modInfo.isCameraScript, "li".Tag(isCameraScriptMessage, localeId: "HRTC_ICSM_S"), "isCameraScript mt-1")));
            this.Write("\r\n                    </div>");

                }
            }
            return "";
        } 
// End Reusable templates

            this.Write("\r\n    <section>   \r\n        ");
 RenderSection(unsubscribe.Count, $"{(unsubscribe.Count == 1 ? "MOD" : "MODS") } COULD OR SHOULD BE UNSUBSCRIBED:", "unsubscribe", (unsubscribe.Count == 1 ? "HRT_RS_US": "HRT_RS_UP"), () => RenderContent(unsubscribe, "unsubscribe")); 
            this.Write("        ");
 RenderSection(majorIssues.Count, $"{(majorIssues.Count == 1 ? "MOD HAS" : "MODS HAVE") } MAJOR ISSUES:", "major", (majorIssues.Count == 1 ? "HRT_RS_MAIS": "HRT_RS_MAIP"), () => RenderContent(majorIssues, "major")); 
            this.Write("        ");
 RenderSection(minorIssues.Count, $"{(minorIssues.Count == 1 ? "MOD HAS" : "MODS HAVE") } MINOR ISSUES:", "minor", (minorIssues.Count == 1 ? "HRT_RS_MIS": "HRT_RS_MIP"), () => RenderContent(minorIssues, "minor")); 
            this.Write("        ");
 RenderSection(remarks.Count, $"{(remarks.Count == 1 ? "MOD" : "MODS") } WITH REMARKS:", "remark", (remarks.Count == 1 ? "HRT_RS_RS": "HRT_RS_R"), () => RenderContent(remarks, "remark")); 
            this.Write("        ");
 RenderSection(nothingToReport.Count, $"{(nothingToReport.Count == 1 ? "MOD" : "MODS")} WITH NOTHING TO REPORT:", "nothing", (nothingToReport.Count == 1 ? "HRT_RS_NTRS": "HRT_RS_NTRP"),  () => RenderContent(nothingToReport, "nothing")); 
            this.Write(@"    </section>

    <section>
        <article id=""processed"">    
            <h3 class=""report-section__titleBar processed"" data-i18n=""HRT_P_PM"">Processed mods</h3>
        
            <div class=""line_processed"" style=""padding: 10px"">
                <table style=""margin-top: 10px"">
                    <tr>
                        <th data-i18n=""HRT_P_MN"">Mod Name</th>
                        <th data-i18n=""HRT_P_D"">Disabled</th>
                        <th data-i18n=""HRT_P_T"">Type</th>
                        <th data-i18n=""HRT_P_U"">Url</th>
                    </tr>
");

                foreach (InstalledModInfo modInfo in AllModList())
                {

            this.Write("                    <tr>\r\n                       <td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(modInfo.subscriptionName));
            this.Write("</td>\r\n                       <td class=\"font-bold center\" ");
            this.Write(this.ToStringHelper.ToStringWithCulture((!string.IsNullOrEmpty(modInfo.disabled) ? HtmlExtensions.T("HRTC_CM_ID") : "")));
            this.Write(">");
            this.Write(this.ToStringHelper.ToStringWithCulture(modInfo.disabled));
            this.Write("</td>\r\n                       <td data-i18n=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(modInfo.typeLocaleID));
            this.Write("\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(modInfo.type));
            this.Write("</td>\r\n                       <td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(OptionalUrlLink(modInfo.url, modInfo.isSteam)));
            this.Write("</td>\r\n                    </tr>\r\n");

                }

            this.Write("                </table>\r\n            </div>\r\n        </article>\r\n    </section>\r" +
                    "\n\r\n    <footer>\r\n        <hr>\r\n        <span> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(catalog.ReportFooterText));
            this.Write(" </span>\r\n    </footer>\r\n\r\n</body>\r\n<script>\r\n   changeLanguage(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPreferredLanguage()));
            this.Write("\");\r\n</script>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal class HtmlReportTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
